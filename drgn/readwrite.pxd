from cpython.buffer cimport Py_buffer
from libc.stdint cimport int8_t, int16_t, int32_t, int64_t, uint8_t, uint16_t, uint32_t, uint64_t
from libc.string cimport memchr, memcpy


cdef extern from "Python.h":

    cdef Py_ssize_t PY_SSIZE_T_MAX
    str PyUnicode_FromStringAndSize(const char *u, Py_ssize_t size)
    bytes PyBytes_FromStringAndSize(const char *v, Py_ssize_t size)


cdef inline bint in_bounds(Py_ssize_t buffer_size, Py_ssize_t offset,
                           Py_ssize_t size) nogil:
    return offset >= 0 and buffer_size >= size and offset <= buffer_size - size


cdef inline int check_bounds(Py_ssize_t buffer_size, Py_ssize_t offset,
                             Py_ssize_t size) except -1:
    if not in_bounds(buffer_size, offset, size):
        raise EOFError()
    return 0


cdef inline int read_buffer(const char *buffer, Py_ssize_t buffer_size,
                            Py_ssize_t *offset, void *ret,
                            Py_ssize_t size) except -1:
    check_bounds(buffer_size, offset[0], size)
    memcpy(ret, buffer + offset[0], size)
    offset[0] += size
    return 0


cdef inline bytes read_bytes(const char *buffer, Py_ssize_t buffer_size,
                             Py_ssize_t *offset, Py_ssize_t size):
    check_bounds(buffer_size, offset[0], size)
    cdef bytes ret = PyBytes_FromStringAndSize(buffer + offset[0], size)
    offset[0] += size
    return ret


cdef inline str read_str(const char *buffer, Py_ssize_t buffer_size,
                         Py_ssize_t *offset):
    if offset[0] >= buffer_size:
        raise EOFError()

    cdef const char *p = buffer + offset[0]
    cdef const char *nul = <const char *>memchr(p, 0, buffer_size - offset[0])
    if nul == NULL:
        raise ValueError('unterminated string')
    offset[0] += (nul - p) + 1
    return PyUnicode_FromStringAndSize(p, nul - p)


cdef inline Py_ssize_t read_strlen(const char *buffer, Py_ssize_t buffer_size,
                                   Py_ssize_t *offset) except -1:
    if offset[0] >= buffer_size:
        raise EOFError()

    cdef const char *p = buffer + offset[0]
    cdef const char *nul = <const char *>memchr(p, 0, buffer_size - offset[0])
    if nul == NULL:
        raise ValueError('unterminated string')
    cdef Py_ssize_t ret = nul - p
    offset[0] += ret + 1
    return ret


# Automatically generated by generate_readwrite.py
cdef inline int read_s8(const char *buffer, Py_ssize_t buffer_size, Py_ssize_t *offset, int8_t *ret) except -1:
    check_bounds(buffer_size, offset[0], sizeof(int8_t))
    ret[0] = (<const int8_t *>(buffer + offset[0]))[0]
    offset[0] += sizeof(int8_t)
    return 0


cdef inline int read_u8(const char *buffer, Py_ssize_t buffer_size, Py_ssize_t *offset, uint8_t *ret) except -1:
    check_bounds(buffer_size, offset[0], sizeof(uint8_t))
    ret[0] = (<const uint8_t *>(buffer + offset[0]))[0]
    offset[0] += sizeof(uint8_t)
    return 0


cdef inline int read_u8_into_u64(const char *buffer, Py_ssize_t buffer_size, Py_ssize_t *offset, uint64_t *ret) except -1:
    check_bounds(buffer_size, offset[0], sizeof(uint8_t))
    ret[0] = (<const uint8_t *>(buffer + offset[0]))[0]
    offset[0] += sizeof(uint8_t)
    return 0


cdef inline int read_u8_into_ssize_t(const char *buffer, Py_ssize_t buffer_size, Py_ssize_t *offset, Py_ssize_t *ret) except -1:
    check_bounds(buffer_size, offset[0], sizeof(uint8_t))
    ret[0] = (<const uint8_t *>(buffer + offset[0]))[0]
    offset[0] += sizeof(uint8_t)
    return 0


cdef inline int write_u8(char *buffer, Py_ssize_t buffer_size, Py_ssize_t offset, uint8_t value) except -1:
    check_bounds(buffer_size, offset, sizeof(uint8_t))
    (<uint8_t *>(buffer + offset))[0] = value
    return 0


cdef inline int read_s16(const char *buffer, Py_ssize_t buffer_size, Py_ssize_t *offset, int16_t *ret) except -1:
    check_bounds(buffer_size, offset[0], sizeof(int16_t))
    ret[0] = (<const int16_t *>(buffer + offset[0]))[0]
    offset[0] += sizeof(int16_t)
    return 0


cdef inline int read_u16(const char *buffer, Py_ssize_t buffer_size, Py_ssize_t *offset, uint16_t *ret) except -1:
    check_bounds(buffer_size, offset[0], sizeof(uint16_t))
    ret[0] = (<const uint16_t *>(buffer + offset[0]))[0]
    offset[0] += sizeof(uint16_t)
    return 0


cdef inline int read_u16_into_u64(const char *buffer, Py_ssize_t buffer_size, Py_ssize_t *offset, uint64_t *ret) except -1:
    check_bounds(buffer_size, offset[0], sizeof(uint16_t))
    ret[0] = (<const uint16_t *>(buffer + offset[0]))[0]
    offset[0] += sizeof(uint16_t)
    return 0


cdef inline int read_u16_into_ssize_t(const char *buffer, Py_ssize_t buffer_size, Py_ssize_t *offset, Py_ssize_t *ret) except -1:
    check_bounds(buffer_size, offset[0], sizeof(uint16_t))
    ret[0] = (<const uint16_t *>(buffer + offset[0]))[0]
    offset[0] += sizeof(uint16_t)
    return 0


cdef inline int write_u16(char *buffer, Py_ssize_t buffer_size, Py_ssize_t offset, uint16_t value) except -1:
    check_bounds(buffer_size, offset, sizeof(uint16_t))
    (<uint16_t *>(buffer + offset))[0] = value
    return 0


cdef inline int read_s32(const char *buffer, Py_ssize_t buffer_size, Py_ssize_t *offset, int32_t *ret) except -1:
    check_bounds(buffer_size, offset[0], sizeof(int32_t))
    ret[0] = (<const int32_t *>(buffer + offset[0]))[0]
    offset[0] += sizeof(int32_t)
    return 0


cdef inline int read_u32(const char *buffer, Py_ssize_t buffer_size, Py_ssize_t *offset, uint32_t *ret) except -1:
    check_bounds(buffer_size, offset[0], sizeof(uint32_t))
    ret[0] = (<const uint32_t *>(buffer + offset[0]))[0]
    offset[0] += sizeof(uint32_t)
    return 0


cdef inline int read_u32_into_u64(const char *buffer, Py_ssize_t buffer_size, Py_ssize_t *offset, uint64_t *ret) except -1:
    check_bounds(buffer_size, offset[0], sizeof(uint32_t))
    ret[0] = (<const uint32_t *>(buffer + offset[0]))[0]
    offset[0] += sizeof(uint32_t)
    return 0


cdef inline int read_u32_into_ssize_t(const char *buffer, Py_ssize_t buffer_size, Py_ssize_t *offset, Py_ssize_t *ret) except -1:
    check_bounds(buffer_size, offset[0], sizeof(uint32_t))
    ret[0] = (<const uint32_t *>(buffer + offset[0]))[0]
    offset[0] += sizeof(uint32_t)
    return 0


cdef inline int write_u32(char *buffer, Py_ssize_t buffer_size, Py_ssize_t offset, uint32_t value) except -1:
    check_bounds(buffer_size, offset, sizeof(uint32_t))
    (<uint32_t *>(buffer + offset))[0] = value
    return 0


cdef inline int read_s64(const char *buffer, Py_ssize_t buffer_size, Py_ssize_t *offset, int64_t *ret) except -1:
    check_bounds(buffer_size, offset[0], sizeof(int64_t))
    ret[0] = (<const int64_t *>(buffer + offset[0]))[0]
    offset[0] += sizeof(int64_t)
    return 0


cdef inline int read_u64(const char *buffer, Py_ssize_t buffer_size, Py_ssize_t *offset, uint64_t *ret) except -1:
    check_bounds(buffer_size, offset[0], sizeof(uint64_t))
    ret[0] = (<const uint64_t *>(buffer + offset[0]))[0]
    offset[0] += sizeof(uint64_t)
    return 0


cdef inline int write_u64(char *buffer, Py_ssize_t buffer_size, Py_ssize_t offset, uint64_t value) except -1:
    check_bounds(buffer_size, offset, sizeof(uint64_t))
    (<uint64_t *>(buffer + offset))[0] = value
    return 0
